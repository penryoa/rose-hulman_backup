
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.imageio.ImageIO;
import javax.swing.JLabel;

public class World implements Temporal {

	// ======= Important Objects ======= \\

	DigDugComponent c;
	private static final long UPDATE_INTERVAL_MS = 300;
	private Level level;
	private BufferedImage image;

	protected int score;
	protected int rockFallCount;
	protected boolean isPaused = false;
	protected boolean stop = false;
	protected Hero hero;
	protected MasterSword theSword = null;
	protected HashMap<Point, BlackSpace> blackSpaces = new HashMap<>();
	protected ArrayList<Fruit> fruits = new ArrayList<>();
	protected ArrayList<Monster> monsters = new ArrayList<>();
	protected ArrayList<Rock> rocks = new ArrayList<>();
	protected ArrayList<GameObject> objects = new ArrayList<>();
	protected Point centerPoint = new Point(220, 260);
	protected JLabel scoreLabel;

	// ======= World Constructor ======= \\

	public World(DigDugComponent digDugComponent, JLabel scoreLabel) {
		// this.score = this.level.currentScore;
		this.scoreLabel = scoreLabel;
		this.rockFallCount = 0;
		this.hero = new Hero(new Point(200, 300), this, "hero");
		this.c = digDugComponent;
		this.initialize();
		this.setLevelObjects();

		Runnable tickTock = new Runnable() {
			@Override
			public void run() {
				try {
					while (true) {
						Thread.sleep(UPDATE_INTERVAL_MS);
						timePassed();
					}
				} catch (InterruptedException exception) {
				}
			}
		};
		new Thread(tickTock).start();
	}

	// ======= Temporal Methods ======= \\

	public synchronized void timePassed() {
//		if(this.level.getCurrentLevel()!=5) {
//			if(this.monsters.size()==0) {
//				this.changeLevel(1);
//			}
//		}
		
		if (!this.isPaused) {
			this.stop = false;
			this.objects = this.getObjects();
			for(int i=0;i<this.objects.size();i++) {
				
				if(this.monsters.size()>0) {
					for (int j=0;j<this.monsters.size();j++) {
						this.objects.get(i).collideWithMonster(this.monsters.get(j));
					}
				}
				this.objects.get(i).collideWithHero(hero);
				if(this.stop==true) {
					break;
				}
				this.objects.get(i).timePassed();
			}
			
			if (this.rockFallCount == 2) {
				this.fruits.add(new Fruit(this.centerPoint, this, "fruit"));
				this.rockFallCount = 0;
			}
			this.c.repaint();
		}
		this.updateScoreLabel();
	}

	// ======= Other Methods ======= \\

	public void initialize() {
		try {
			this.level = new Level((Graphics2D) c.getGraphics());
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		try {
			this.image = ImageIO.read(new File("bkgd1.png"));
		} catch (IOException e) {
			throw new RuntimeException("Error drawing background: " + e);
		}
	}

	public void drawDirtImage(Graphics2D g2) {
		g2.drawImage(this.level.image, 0, 0, null);
	}

	public void setToLevel(int num) throws IOException {
		this.level.setToLevel(num);
	}
	
	public void changeLevel(int num) {

		Graphics2D g2 = (Graphics2D) this.c.getGraphics();

		if (this.level.canChangeLevel(num)) {
			this.blackSpaces.clear();
			this.rockFallCount = 0;
			this.monsters.clear();
			this.rocks.clear();
			this.fruits.clear();
			this.theSword = null;
			this.objects.clear();

			try {
				this.level.changeLevel(num);
			} catch (IOException e) {
				e.printStackTrace();
			}
			this.setLevelObjects();
			this.drawDirtImage(g2);

			this.c.repaint();
		}
	}

	public void setLevelObjects() {

		for (Point p : this.level.tunnelLocations) {
			BlackSpace newSpace = new BlackSpace(p);
			this.blackSpaces.put(p, newSpace);
		}

		for (Point p : this.level.fygarLocations) {
			Fygar newFygar = new Fygar(p, this, "fygar");
			this.monsters.add(newFygar);
			this.objects.add(newFygar);
		}

		for (Point p : this.level.pookieLocations) {
			Pookie newPookie = new Pookie(p, this, "pookie");
			this.monsters.add(newPookie);
			this.objects.add(newPookie);
		}

		for (Point p : this.level.creeperLocations) {
			Creeper newCreeper = new Creeper(p, this, "creep");
			this.monsters.add(newCreeper);
			this.objects.add(newCreeper);
		}

		for (Point p : this.level.R2Locations) {
			Rock2 newRock = new Rock2(p, this, "rock");
			this.rocks.add(newRock);
			this.objects.add(newRock);
		}
		
		for (Point p : this.level.R1Locations) {
			Rock1 newRock = new Rock1(p, this, "rock1");
			this.rocks.add(newRock);
			this.objects.add(newRock);
		}
		
		for (Point p : this.level.masterSwordLocations) {
			MasterSword theSword = new MasterSword(p, this, "masterSword");
			this.fruits.add(theSword);
			this.theSword = theSword;
			this.objects.add(theSword);
		}

		for (GameObject o : this.objects) {
			o.setBlackSpace(this.blackSpaces);
		}

		this.hero.centerPoint = this.level.heroLocation;
		this.objects.add(this.hero);
	}

	public void addToScore(int value) {
		try {
			this.level.addToScore(value);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void updateScoreLabel() {
		this.scoreLabel.setText("Current Score: " + this.level.currentScore + "          Lives left: " + this.getHero().livesLeft);
	}

	// ======= Getter Methods ======= \\
	public synchronized ArrayList<GameObject> getObjects() {
		ArrayList<GameObject> newList = new ArrayList<>();
		newList.addAll(monsters);
		newList.addAll(rocks);
		newList.addAll(fruits);
		newList.add(hero);
		return newList;
	}

	@Override
	public void die() {

	}

	@Override
	public void setIsPaused(boolean isPaused) {

	}

	@Override
	public boolean getIsPaused() {
		return false;
	}
	
	public Hero getHero(){
		return this.hero;
	}
}
