import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

public class Hero extends GameObject {

	// ======= Important Objects ======= \\

	private BufferedImage image;
	public Point position;
	private boolean collision;
	private World world;

	private int directionx;
	private int directiony;
	private Monster monster;
	boolean hit;

	// ======= Hero Constructor ======= \\

	public Hero(Point initialPosition, World world) {
		super(initialPosition, world);
		this.world = world;
		this.position = initialPosition;
		try {
			image = ImageIO.read(new File("hero.png"));
		} catch (IOException e) {
			throw new RuntimeException("Error drawing hero: " + e);
		}

		this.collision = true;
		this.hit = true;
		this.directionx = 0;
		this.directiony = 0;
		// this.monster=world.getMonster();
	}

	// ======= Drawable Methods ======= \\

	public void drawCentered(Graphics2D g2) {
		g2 = (Graphics2D) g2.create();
		g2.translate(position.x, position.y);
		g2.translate(-image.getWidth() / 2, -image.getHeight() / 2);
		g2.drawImage(image, 0, 0, null);
	}

	@Override
	public void move(int dx, int dy) {
		this.directionx = dx;
		this.directiony = dy;

		if (Math.abs(this.getCenterPoint().getX() + dx - 300) < 40
				&& Math.abs(this.getCenterPoint().getY() + dy - 300) < 40) {
			hit = false;
		} else {
			hit = true;
		}
		for(int i=0;i<this.world.getMonsters().size();i++) {
			if(Math.abs(this.position.x+dx - this.world.getMonsters().get(i).getPosition().x) < 40
				&& Math.abs(this.position.y+dy - this.world.getMonsters().get(i).getPosition().y) < 40) {
				hit = false;
			}
		}
		
		if (hit==true && this.getCenterPoint().getX() + dx > 30 && this.getCenterPoint().getX() + dx < 490
				&& this.getCenterPoint().getY() + dy > 130 && this.getCenterPoint().getY() + dy < 590) {
			this.position = new Point(position.x + dx, position.y + dy);
		}

	}

	public Point getCenterPoint() {
		return this.position;
	}

	// ======= Other Methods ======= \\

	public void drawShooter(Graphics2D g2) {
		Shooter newShooter = new Shooter(g2, this.getCenterPoint(), this.directionx, this.directiony, this.world);
		newShooter.move();
	}

	// ======= Temporal Methods ======= \\

	public void die() {
		this.world.getGameObejects().remove(this);
	}

	// ======= GameObject Methods ======= \\

	public void update(int i, int j) {
		// TODO Auto-generated method stub.

	}

	@Override
	public void drawOn() {
		// TODO Auto-generated method stub.

	}

	@Override
	public boolean shouldRemove() {
		// TODO Auto-generated method stub.
		return false;
	}

	@Override
	public void onRemove() {
		// TODO Auto-generated method stub.

	}

	@Override
	public void drawOn(Graphics2D g2) {
		// TODO Auto-generated method stub.

	}

	@Override
	public void collideWith(GameObject other) {
		// TODO Auto-generated method stub.

	}

	@Override
	public void collideWithMonster(Monster monster) {

	}

	@Override
	public void collideWithRock(Rock rock) {
		// TODO Auto-generated method stub.
		if (Math.abs(this.getCenterPoint().getX() + this.directionx - rock.returnPosition().getX()) < 40
				&& Math.abs(this.getCenterPoint().getY() + this.directiony - rock.returnPosition().getX()) < 40) {
			this.collision = false;
		} else {
			this.collision = true;
		}
	}

	@Override
	public void collideWithHero(Hero hero) {
		// TODO Auto-generated method stub.

	}

}
