
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 * DirectionListener is responsible for responding to the keyboard.
 * 
 * @author penryoa
 *
 */

public class DirectionListener implements KeyListener {
	DigDugComponent c;
	private World w;
	private Hero h;

	public DirectionListener(DigDugComponent c) {
		this.c = c;
		this.w = this.c.getWorld();
		this.h = this.w.hero;
	}

	@Override
	public void keyPressed(KeyEvent e) {
		if (e.getKeyCode() == e.VK_LEFT) {
			this.h.moveBy(-10, 0);
			this.dig();
		} else if (e.getKeyCode() == e.VK_RIGHT) {
			this.h.moveBy(10, 0);
			this.dig();
		} else if (e.getKeyCode() == e.VK_UP) {
			this.h.moveBy(0, -10);
			this.dig();
		} else if (e.getKeyCode() == e.VK_DOWN) {
			this.h.moveBy(0, 10);
			this.dig();
		} else if (e.getKeyCode() == e.VK_U) {
			this.w.changeLevel(1);
		} else if (e.getKeyCode() == e.VK_D) {
			this.w.changeLevel(-1);
		} else if (e.getKeyCode() == e.VK_SPACE) {
			this.h.newShooter = null;
			if (this.h.haveMasterSword) {
				if (this.h.name == "knight") {
					this.h.newShooter = new ShockWave(new Point(this.h.centerPoint.x + 80, this.h.centerPoint.y),
							this.w, "shockWave");
				} else if (this.h.name == "knightLeft") {
					this.h.newShooter = new ShockWave(new Point(this.h.centerPoint.x - 80, this.h.centerPoint.y),
							this.w, "shockWave");
				} else if (this.h.name == "knightUp") {
					this.h.newShooter = new ShockWave(new Point(this.h.centerPoint.x, this.h.centerPoint.y - 80),
							this.w, "shockWave1");
				} else if (this.h.name == "knightDown") {
					this.h.newShooter = new ShockWave(new Point(this.h.centerPoint.x, this.h.centerPoint.y + 80),
							this.w, "shockWave1");
				}
			} else {
				if ((this.w.blackSpaces.containsKey(new Point(this.h.centerPoint.x + 40, this.h.centerPoint.y))
						|| this.w.blackSpaces
								.containsKey(new Point(this.h.centerPoint.x + 40, this.h.centerPoint.y + 10))
						|| this.w.blackSpaces
								.containsKey(new Point(this.h.centerPoint.x + 40, this.h.centerPoint.y - 10)))
						&& this.h.name == "hero") {
					this.h.newShooter = new Shooter(new Point(this.h.centerPoint.x + 40, this.h.centerPoint.y), this.w,
							"shooter");
				} else if ((this.w.blackSpaces.containsKey(new Point(this.h.centerPoint.x - 40, this.h.centerPoint.y))
						|| this.w.blackSpaces
								.containsKey(new Point(this.h.centerPoint.x - 40, this.h.centerPoint.y + 10))
						|| this.w.blackSpaces
								.containsKey(new Point(this.h.centerPoint.x - 40, this.h.centerPoint.y - 10)))
						&& this.h.name == "heroLeft") {
					this.h.newShooter = new Shooter(new Point(this.h.centerPoint.x - 40, this.h.centerPoint.y), this.w,
							"shooter");
				} else if ((this.w.blackSpaces.containsKey(new Point(this.h.centerPoint.x, this.h.centerPoint.y - 40))
						|| this.w.blackSpaces
								.containsKey(new Point(this.h.centerPoint.x + 10, this.h.centerPoint.y - 40))
						|| this.w.blackSpaces
								.containsKey(new Point(this.h.centerPoint.x - 10, this.h.centerPoint.y - 40)))
						&& this.h.name == "heroUp") {
					this.h.newShooter = new Shooter(new Point(this.h.centerPoint.x, this.h.centerPoint.y - 40), this.w,
							"shooter1");
				} else if ((this.w.blackSpaces.containsKey(new Point(this.h.centerPoint.x, this.h.centerPoint.y + 40))
						|| this.w.blackSpaces
								.containsKey(new Point(this.h.centerPoint.x + 10, this.h.centerPoint.y + 40))
						|| this.w.blackSpaces
								.containsKey(new Point(this.h.centerPoint.x - 10, this.h.centerPoint.y + 40)))
						&& this.h.name == "heroDown") {
					this.h.newShooter = new Shooter(new Point(this.h.centerPoint.x, this.h.centerPoint.y + 40), this.w,
							"shooter1");
				}
			}
			if (this.h.newShooter != null) {
				this.h.newShooter.drawCentered((Graphics2D) this.c.getGraphics());
				this.h.newShooter.move();
			}
		} else if (e.getKeyCode() == e.VK_P) {
			if (this.w.isPaused) {
				this.w.setIsPaused(false);
			} else {
				this.w.setIsPaused(true);
			}
		}
	}

	public void dig() {
		if (this.w.isDigging == false && !this.w.blackSpaces.containsKey(this.h.getCenterPoint())) {
			this.w.addBlackSpaces(this.h.getCenterPoint());
			this.w.addToScore(1);
			this.w.updateScoreLabel();
		}
		this.c.repaint();
	}

	@Override
	public void keyReleased(KeyEvent e) {
	}

	@Override
	public void keyTyped(KeyEvent e) {
	}

}
