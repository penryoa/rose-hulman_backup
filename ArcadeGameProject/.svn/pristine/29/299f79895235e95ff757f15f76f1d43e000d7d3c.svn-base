
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.imageio.ImageIO;

public class World implements Temporal {

	// ======= Important Objects ======= \\

	private static final long UPDATE_INTERVAL_MS = 300;
	private boolean isPaused = false;
	private BufferedImage image;
	public Shape background;
	DigDugComponent c;
	private int level = 1;
	private Hero hero;
	public HashMap<Point, BlackSpace> blackSpaces = new HashMap<>();
	private ArrayList<Monster> monsters = new ArrayList<>();
	private ArrayList<Rock> rocks = new ArrayList<>();

	// ======= World Constructor ======= \\

	public World(DigDugComponent digDugComponent) {
		this.c = digDugComponent;

		this.background = new Rectangle2D.Double(0, 0, 620, 620);
		try {
			this.image = ImageIO.read(new File("bkgd1.png"));
		} catch (IOException e) {
			throw new RuntimeException("Error drawing dirt: " + e);
		}
		this.hero = new Hero(new Point(200, 500), this);
		this.rocks.add(new Rock(new Point(300, 300), this));
		this.monsters.add(new Fygar(new Point(100, 200), this));

		// BlackSpace blackSpace = new BlackSpace(hero.position);
		Point pt1 = new Point(110, 200);
		Point pt2 = new Point(120, 200);
		Point pt3 = new Point(130, 200);
		Point pt4 = new Point(140, 200);
		BlackSpace blackSpace1 = new BlackSpace(pt1);
		BlackSpace blackSpace2 = new BlackSpace(pt2);
		BlackSpace blackSpace3 = new BlackSpace(pt3);
		BlackSpace blackSpace4 = new BlackSpace(pt4);

		// this.blackSpaces.add(blackSpace);
		this.blackSpaces.put(pt1, blackSpace1);
		this.blackSpaces.put(pt2, blackSpace2);
		this.blackSpaces.put(pt3, blackSpace3);
		this.blackSpaces.put(pt4, blackSpace4);
		for (int i = 0; i < monsters.size(); i++) {
			this.monsters.get(i).setBlackSpace(blackSpaces);
		}

		Runnable tickTock = new Runnable() {
			@Override
			public void run() {
				try {
					while (true) {
						Thread.sleep(UPDATE_INTERVAL_MS);
						timePassed();
					}
				} catch (InterruptedException exception) {
					// Stop when interrupted
				}
			}
		};
		new Thread(tickTock).start();
	}

	// public synchronized List<Drawable> getDrawableParts() {
	// return new ArrayList<Drawable>(this.balls);
	// }

	// ======= Temporal Methods ======= \\

	public synchronized void timePassed() {
		if (!this.isPaused) {
			for (int i = 0; i < monsters.size(); i++) {
				this.monsters.get(i).timePassed();
			}
			this.c.repaint();
		}
		// this.monsters.removeAll(this.monstersToRemove);
		// this.monstersToRemove.clear();
		// this.monsters.addAll(this.monstersToAdd);
		// this.monstersToAdd.clear();
	}

	@Override
	public void die() {
	}

	@Override
	public void setIsPaused(boolean isPaused) {
	}

	@Override
	public boolean getIsPaused() {
		return false;
	}

	// ======= Other Methods ======= \\

	public void drawBackground(Graphics2D g2) {
		g2.setColor(Color.BLACK);
		g2.draw(background);
		g2.fill(background);
	}

	public void drawLevel(Graphics2D g2) {
		g2.drawImage(this.image, 20, 120, null);
		for (Point keys : blackSpaces.keySet()) {
			blackSpaces.get(keys).drawBlackSpace(g2);
		}

	}

	public void changeLevel(int num) {

		if (this.level + num >= 1 && this.level + num <= 4) {
			this.level += num;
			try {
				this.image = ImageIO.read(new File("bkgd" + this.level + ".png"));
				this.blackSpaces.clear();
				drawLevel((Graphics2D) this.c.getGraphics());

				this.getHero().position = new Point(200, 500);
				BlackSpace blackSpace = new BlackSpace(this.getHero().position);
				this.blackSpaces.put(this.getHero().position, blackSpace);

				for (int i = 0; i < monsters.size(); i++) {
					this.monsters.get(i).setBlackSpace(this.blackSpaces);
				}

				for (int i = 0; i < monsters.size(); i++) {
					this.monsters.get(i).drawCentered((Graphics2D) this.c.getGraphics());
				}

				for (int i = 0; i < rocks.size(); i++) {
					this.rocks.get(i).drawCentered((Graphics2D) this.c.getGraphics());
				}

				this.getHero().drawCentered(((Graphics2D) this.c.getGraphics()));

			} catch (IOException e) {
				throw new RuntimeException("Error in drawing: " + e);
			}
		}
	}

	// ======= Getter Methods ======= \\

	public Hero getHero() {
		return hero;
	}

	public ArrayList<Rock> getRocks() {
		return rocks;
	}

	public ArrayList<Monster> getMonsters() {
		return monsters;
	}

	public HashMap<Point, BlackSpace> getBlackSpcaces() {
		return blackSpaces;
	}

	public synchronized ArrayList<GameObject> getGameObejects() {
		ArrayList<GameObject> newList = new ArrayList<>();
		newList.addAll(monsters);
		newList.addAll(rocks);
		newList.add(hero);
		return newList;
	}
}
