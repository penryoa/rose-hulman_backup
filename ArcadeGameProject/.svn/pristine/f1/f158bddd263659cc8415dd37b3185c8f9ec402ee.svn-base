
import java.awt.Point;

public abstract class Monster extends GameObject {

	// ======= Important Objects ======= \\

	protected boolean isPaused = false;
	protected boolean up = false;
	protected boolean down = false;
	protected boolean left = false;
	protected boolean right = false;
	protected boolean isGhost = false;
	protected int moveCount = 0;
	protected int timeCounter;
	protected String originalName;

	// ======= Monster Constructor ======= \\

	public Monster(Point centerPoint, World world, String name) {
		super(centerPoint, world, name);
		this.originalName = name;
		this.centerPoint = centerPoint;
		this.timeCounter = 0;
		this.hit = false;
	}

	// ======= Other Methods ======= \\

	@Override
	public void timePassed() {
//		for(int i=1;i<this.world.rocks.size();i++) {
//			this.collideWithRock(this.world.rocks.get(i));
//		}
		
		this.timeCounter++;
		if (this.timeCounter > 30) {
			this.isGhost = true;
			this.name = "ghost";
			this.image = this.getImage();
		} else {
			this.isGhost = false;
			this.name = this.originalName;
			this.image = this.getImage();
		}

		Point leftPt = new Point(this.centerPoint.x + 10, this.centerPoint.y);
		Point downPt = new Point(this.centerPoint.x, this.centerPoint.y + 10);
		Point rightPt = new Point(this.centerPoint.x - 10, this.centerPoint.y);
		Point upPt = new Point(this.centerPoint.x, this.centerPoint.y - 10);

		if (this.hit == false && this.isGhost == false) {
			if (this.hit == false) {
				if (left == false && this.blackSpaces.containsKey(leftPt)) {
					this.right = true;
					this.moveBy(10, 0);
					return;
				} else {
					this.right = false;
				}

				if (up == false && this.blackSpaces.containsKey(downPt)) {
					this.down = true;
					this.moveBy(0, 10);
					return;
				} else {
					this.down = false;
				}

				if (this.blackSpaces.containsKey(rightPt)) {
					this.left = true;
					this.moveBy(-10, 0);
					return;
				} else {
					this.left = false;
				}

				if (this.blackSpaces.containsKey(upPt)) {
					this.up = true;
					this.moveBy(0, -10);
					return;
				} else {
					this.up = false;
				}
			}
		} else if(this.hit==false){
			if (this.getCenterPoint().getX() - this.world.hero.getCenterPoint().getX() > 0) {
				this.moveBy(-10, 0);
			} else {
				this.moveBy(10, 0);
			}
			if (this.getCenterPoint().getY() - this.world.hero.getCenterPoint().getY() > 0) {
				this.moveBy(0, -10);
			} else {
				this.moveBy(0, 10);
			}
			if (this.blackSpaces.containsKey(this.getCenterPoint())) {
				this.timeCounter = 0;
			}
		}
		this.hit = false;
	}

	@Override
	public void die() {
		this.world.monsters.remove(this);
		this.world.addToScore(300);
	}
	
	@Override
	public void collideWithHero(Hero hero) {
		double x1 = this.getCenterPoint().getX();
		double y1 = this.getCenterPoint().getY();
		double x2 = hero.getCenterPoint().getX();
		double y2 = hero.getCenterPoint().getY();
		if (Math.abs(x2 - x1) < 40 && Math.abs(y2 - y1) < 40) {
			this.hit = true;
			hero.die();
		}
	}

}
