package queues;

import java.lang.reflect.Array;
import java.util.NoSuchElementException;

/**
 * A circular queue that grows as needed.
 * 
 * @author Matt Boutell and <<<your name here>>>
 * @param <T>
 */
public class GrowableCircularArrayQueue<T> implements SimpleQueue<T> {
	// TODO: Declare this class to implement SimpleQueue<T>, then add the
	// missing methods (Eclipse will help).
	// TODO: The javadoc for overridden methods is in the SimpleQueue interface.
	// Read it!

	private static final int INITIAL_CAPACITY = 5;

	private T[] array;
	private Class<T> type;

	private int front;
	private int end;

	/**
	 * Creates an empty queue with an initial capacity of 5
	 * 
	 * @param type
	 *            So that an array of this type can be constructed.
	 */
	@SuppressWarnings("unchecked")
	public GrowableCircularArrayQueue(Class<T> type) {
		this.type = type;
		// This is a workaround due to a limitation Java has with
		// constructing generic arrays.
		this.array = (T[]) Array.newInstance(this.type, INITIAL_CAPACITY);
		front = 0;
		end = 0;
	}

	/**
	 * Displays the contents of the queue in insertion order, with the
	 * most-recently inserted one last, in other words, not wrapped around. Each
	 * adjacent pair will be separated by a comma and a space, and the whole
	 * contents will be bounded by square brackets. See the unit tests for
	 * examples.
	 */
	@Override
	public String toString() {
		// DONE: implement this method

		if (this.array.length == 0) {
			return "[]";
		}

		String s = new String();
		s += "[";
		for (int i = 0; i < this.array.length; i++) {
			if (i == this.array.length - 1) {
				if (this.array[i] != null) {
					s += this.array[i] + "]";
				} 
			} else {
				if (this.array[i] != null) {
					s += this.array[i] + ", ";
				} 
			}
		}
		return s;
	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub

	}

	@Override
	public void enqueue(T item) {
		// TODO Auto-generated method stub
		if (end + 1 == front || end == this.array.length - 1 && front == 0) {
			@SuppressWarnings("unchecked")
			T[] tempArray = (T[]) Array.newInstance(this.type, INITIAL_CAPACITY * 2);

			int count = 0;

			for (int i = front; i < this.array.length; i++) {
				tempArray[count] = this.array[i];
				end = i;
				count++;
			}

			for (int i = 0; i < front; i++) {
				tempArray[count] = this.array[i];
				end = i;
				count++;
			}
			this.array = tempArray;
			front = 0;
		}

		if (end == this.array.length - 1) {
			this.array[0] = item;
			end = 0;
		} else {
			this.array[end + 1] = item;
			end = end + 1;
		}

	}

	@Override
	public T dequeue() throws NoSuchElementException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public T peek() throws NoSuchElementException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean contains(T item) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public String debugString() {
		// TODO Auto-generated method stub
		return null;
	}

}
