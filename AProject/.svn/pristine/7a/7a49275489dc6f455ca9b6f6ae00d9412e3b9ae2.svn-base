
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class DirectionListener implements KeyListener {
	DigDugComponent c;
	Point pt;

	public DirectionListener(DigDugComponent c) {
		this.c = c;
	}

	@Override
	public void keyPressed(KeyEvent e) {
		if (e.getKeyCode() == e.VK_LEFT) {
			c.getWorld().getHero().update(-10, 0);
			BlackSpace blackSpace = new BlackSpace(c.getWorld().getHero().position);
			c.getWorld().blackSpaces.put(c.getWorld().getHero().position, blackSpace);
			pt = new Point(c.getWorld().getHero().position);
			if (!c.getWorld().blackSpaces.containsKey(new Point(pt.x - 20, pt.y))
					&& c.getWorld().blackSpaces.containsKey(new Point(pt.x - 40, pt.y))) {
				c.getWorld().blackSpaces.put(new Point(pt.x - 10, pt.y), new BlackSpace(new Point(pt.x - 10, pt.y)));
				c.getWorld().blackSpaces.put(new Point(pt.x - 20, pt.y), new BlackSpace(new Point(pt.x - 20, pt.y)));
				c.getWorld().blackSpaces.put(new Point(pt.x - 30, pt.y), new BlackSpace(new Point(pt.x - 30, pt.y)));
			}
			c.repaint();
		}

		if (e.getKeyCode() == e.VK_RIGHT) {
			c.getWorld().getHero().update(10, 0);
			BlackSpace blackSpace = new BlackSpace(c.getWorld().getHero().position);
			c.getWorld().blackSpaces.put(c.getWorld().getHero().position, blackSpace);
			pt = new Point(c.getWorld().getHero().position);
			if (!c.getWorld().blackSpaces.containsKey(new Point(pt.x + 20, pt.y))
					&& c.getWorld().blackSpaces.containsKey(new Point(pt.x + 40, pt.y))) {
				c.getWorld().blackSpaces.put(new Point(pt.x + 10, pt.y), new BlackSpace(new Point(pt.x + 10, pt.y)));
				c.getWorld().blackSpaces.put(new Point(pt.x + 20, pt.y), new BlackSpace(new Point(pt.x + 20, pt.y)));
				c.getWorld().blackSpaces.put(new Point(pt.x + 30, pt.y), new BlackSpace(new Point(pt.x + 30, pt.y)));
			}
			c.repaint();
		}

		if (e.getKeyCode() == e.VK_UP) {
			c.getWorld().getHero().update(0, -10);
			BlackSpace blackSpace = new BlackSpace(c.getWorld().getHero().position);
			c.getWorld().blackSpaces.put(c.getWorld().getHero().position, blackSpace);
			pt = new Point(c.getWorld().getHero().position);
			if (!c.getWorld().blackSpaces.containsKey(new Point(pt.x, pt.y - 20))
					&& c.getWorld().blackSpaces.containsKey(new Point(pt.x, pt.y - 40))) {
				c.getWorld().blackSpaces.put(new Point(pt.x, pt.y - 10), new BlackSpace(new Point(pt.x, pt.y - 10)));
				c.getWorld().blackSpaces.put(new Point(pt.x, pt.y - 20), new BlackSpace(new Point(pt.x, pt.y - 20)));
				c.getWorld().blackSpaces.put(new Point(pt.x, pt.y - 30), new BlackSpace(new Point(pt.x, pt.y - 30)));
			}
			c.repaint();
		}

		if (e.getKeyCode() == e.VK_DOWN) {
			c.getWorld().getHero().update(0, 10);
			BlackSpace blackSpace = new BlackSpace(c.getWorld().getHero().position);
			c.getWorld().blackSpaces.put(c.getWorld().getHero().position, blackSpace);
			pt = new Point(c.getWorld().getHero().position);
			if (!c.getWorld().blackSpaces.containsKey(new Point(pt.x, pt.y + 20))
					&& c.getWorld().blackSpaces.containsKey(new Point(pt.x, pt.y + 40))) {
				c.getWorld().blackSpaces.put(new Point(pt.x, pt.y + 10), new BlackSpace(new Point(pt.x, pt.y + 10)));
				c.getWorld().blackSpaces.put(new Point(pt.x, pt.y + 20), new BlackSpace(new Point(pt.x, pt.y + 20)));
				c.getWorld().blackSpaces.put(new Point(pt.x, pt.y + 30), new BlackSpace(new Point(pt.x, pt.y + 30)));
			}
			c.repaint();
		}

		if (e.getKeyCode() == e.VK_U) {
			this.c.getWorld().changeLevel(1);
		}

		if (e.getKeyCode() == e.VK_D) {
			this.c.getWorld().changeLevel(-1);
		}
		
		if (e.getKeyCode() == e.VK_SPACE) {
			Shooter newShooter = new Shooter(this.c.getWorld().getHero().position, 10, 0);
			newShooter.drawCentered((Graphics2D) this.c.getGraphics());
			this.c.repaint();
			
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
	}

	@Override
	public void keyTyped(KeyEvent e) {
	}

}
