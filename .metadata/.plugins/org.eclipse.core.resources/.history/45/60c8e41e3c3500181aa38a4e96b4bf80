import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class TestingOneTwoThree {

	public static void main(String[] args) {
		int time_units = 400;
		int times_to_sim = 500;
		
		ArrayList<Integer> results = new ArrayList<>();

		// simulateInTimeUnits(time_units);
		simulateXTimes(times_to_sim, time_units, results);
		
		HashMap<Integer, Integer> map = new HashMap<>();
		dataPoints(times_to_sim, results, map);
		drawData(map, 500, 500);
		

	}

	public static int simulateInTimeUnits(int time_units) {
		int total_displacement = 0;
		for (int i = 0; i < time_units; i++) {
			int displacement = getRandomDisplacement();
			total_displacement += displacement;
		}

		return total_displacement;
	}

	public static void simulateXTimes(int times_to_sim, int time_units, ArrayList<Integer> results) {
		for (int i = 0; i < times_to_sim; i++) {
			results.add(simulateInTimeUnits(time_units));
		}
	}

	public static int getRandomDisplacement() {
		int displacement;

		Random rand = new Random();
		double r = rand.nextDouble();

		if (r > 0.5) {
			displacement = 1;
		} else {
			displacement = -1;
		}

		return displacement;
	}

	public static void dataPoints(int array_size, ArrayList<Integer> array, HashMap<Integer, Integer> map) {
		//int sum = 0;
		for (int i = 0; i < array_size; i++) {
			int key = array.get(i);
			if (!map.containsKey(key)){
				int value = 0;
				for (int j = i; j < array_size;j++){
					if (array.get(j).equals(key)){
						value++;
					}
				}
				//sum+=value;
				map.put(key, value);
			}
			//System.out.println("Key #" + i + ": " + map.get(i));
		}
		//System.out.println(map.toString());
		//System.out.println("Sum: " + sum + " Size: " + array_size);
	}
	
	public static void drawData(HashMap<Integer, Integer> map, int width, int height){
		JFrame frame;
		JPanel panel;
		Graphics g;
//		HashMap<Integer, Integer> map;
		
//		public drawData(HashMap<Integer, Integer> map, int width, int height){	
			frame = new JFrame("Total Displacement (X), Number of Occurences (Y)");
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			frame.setSize(width, height);
			panel = new JPanel();
			frame.add(panel);
			frame.setVisible(true);
			g = panel.getGraphics();
			g.drawOval(25, 25, 25, 25);
		
	}
	
//	class drawData {
//		
//		JFrame frame;
//		JPanel panel;
//		Graphics g;
//		HashMap<Integer, Integer> map;
//		
//		public drawData(HashMap<Integer, Integer> map, int width, int height){	
//			this.frame = new JFrame("Total Displacement (X), Number of Occurences (Y)");
//			this.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//			this.frame.setSize(width, height);
//			this.frame.add(panel);
//			this.frame.setVisible(true);
//			this.panel = new JPanel();
//			this.g = panel.getGraphics();
//		}
//	}

}