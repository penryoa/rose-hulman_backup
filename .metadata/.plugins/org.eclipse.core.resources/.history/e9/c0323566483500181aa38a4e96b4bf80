import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class TestingOneTwoThree {

	public static void main(String[] args) {
		int time_units = 400;
		int times_to_sim = 500;

		ArrayList<Integer> results = new ArrayList<>();

		// simulateInTimeUnits(time_units);
		simulateXTimes(times_to_sim, time_units, results);

		HashMap<Integer, Integer> map = new HashMap<>();
		dataPoints(times_to_sim, results, map);
		double MSD = calculateMSD(map);
		MSD = Math.round(MSD);
		System.out.println("MSD estimate: around " + times_to_sim + ". MSD calculation: " + MSD);
//		drawData(map, 500, 500);

	}

	public static int simulateInTimeUnits(int time_units) {
		int total_displacement = 0;
		for (int i = 0; i < time_units; i++) {
			int displacement = getRandomDisplacement();
			total_displacement += displacement;
		}

		return total_displacement;
	}

	public static void simulateXTimes(int times_to_sim, int time_units, ArrayList<Integer> results) {
		for (int i = 0; i < times_to_sim; i++) {
			results.add(simulateInTimeUnits(time_units));
		}
	}

	public static int getRandomDisplacement() {
		int displacement;

		Random rand = new Random();
		double r = rand.nextDouble();

		if (r > 0.5) {
			displacement = 1;
		} else {
			displacement = -1;
		}

		return displacement;
	}

	public static void dataPoints(int array_size, ArrayList<Integer> array, HashMap<Integer, Integer> map) {
		int sum = 0;
		for (int i = 0; i < array_size; i++) {
			int key = array.get(i);
			if (!map.containsKey(key)) {
				int value = 0;
				for (int j = i; j < array_size; j++) {
					if (array.get(j).equals(key)) {
						value++;
					}
				}
				sum+=value;
				map.put(key, value);
			}
			// System.out.println("Key #" + i + ": " + map.get(i));
		}
		 System.out.println("Data: " + map.toString());
	}
	
	public static double calculateMSD(HashMap<Integer, Integer> map){
		Object[] values = map.values().toArray();
		double sum = 0;
		for (int i = 0; i < values.length-1; i++){
			int current = (int) values[i];
			int next = (int) values[i+1];
			double MSD = Math.pow(current + next, 2);
			sum+=MSD;
		}
		return sum/(values.length);
	}

//	public static void drawData(HashMap<Integer, Integer> map, int width, int height) {
//
//		JFrame frame = new JFrame("Total Displacement (X), Number of Occurences (Y)");
//		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//		frame.setSize(width, height);
//		JPanel panel = new JPanel();
//		frame.add(panel);
//		frame.setVisible(true);
//		component c = new component();
//		Graphics g = panel.getGraphics();
//		g.drawOval(25, 25, 25, 25);
//		frame.pack();
//
//	}
//
//	 class component extends JComponent {
//		 
//		 public component () {
//			 
//		 }
//		 
//		 @Override
//		 protected void paintComponent(Graphics g) {
//			 super.paintComponent(g);
//			 
//		 }
//	 
//	 }

}