package editortrees;

// A height-balanced binary tree with rank that could be the basis for a text editor.

public class EditTree {

	private EditorTreeNode root;
	private int numRot;
	private final EditorTreeNode NULL_NODE = new EditorTreeNode();

	/**
	 * MILESTONE 1 Construct an empty tree
	 */
	public EditTree() {
		this.root = NULL_NODE;
		this.numRot = 0;
	}

	/**
	 * MILESTONE 1 Construct a single-node tree whose element is ch
	 * 
	 * @param ch
	 */
	public EditTree(char ch) {
		this.root = new EditorTreeNode(ch);
		this.numRot = 0;
	}

	/**
	 * MILESTONE 2 Make this tree be a copy of e, with all new nodes, but the same
	 * shape and contents.
	 * 
	 * @param e
	 */
	public EditTree(EditTree e) {
		this.root = new EditorTreeNode(e.root);
		this.numRot = 0;
	}

	/**
	 * MILESTONE 3 Create an EditTree whose toString is s. This can be done in O(N)
	 * time, where N is the size of the tree (note that repeatedly calling insert()
	 * would be O(N log N), so you need to find a more efficient way to do this.
	 * 
	 * @param s
	 */
	public EditTree(String s) {

	}

	/**
	 * MILESTONE 1 returns the total number of rotations done in this tree since it
	 * was created. A double rotation counts as two.
	 *
	 * @return number of rotations since this tree was created.
	 */
	public int totalRotationCount() {
		return this.numRot; // replace by a real calculation.
	}

	/**
	 * MILESTONE 1 return the string produced by an inorder traversal of this tree
	 */
	@Override
	public String toString() {
		String returnString = root.toString();
		return returnString;

	}

	/**
	 * MILESTONE 1 This one asks for more info from each node. You can write it like
	 * the arraylist-based toString() method from the BinarySearchTree assignment.
	 * However, the output isn't just the elements, but the elements, ranks, and
	 * balance codes. Former CSSE230 students recommended that this method, while
	 * making it harder to pass tests initially, saves them time later since it
	 * catches weird errors that occur when you don't update ranks and balance codes
	 * correctly. For the tree with root b and children a and c, it should return
	 * the string: [b1=, a0=, c0=] There are many more examples in the unit tests.
	 * 
	 * @return The string of elements, ranks, and balance codes, given in a
	 *         pre-order traversal of the tree.
	 */
	public String toDebugString() {
		if (this.root == NULL_NODE) {
			return "[]";
		}
		String returnString = "[";
		returnString += root.toDebugString();
		returnString = returnString.substring(0, returnString.length() - 2);
		returnString += "]";
		return returnString;
	}

	/**
	 * MILESTONE 1
	 * 
	 * @param ch
	 *            character to add to the end of this tree.
	 */
	public void add(char ch) {
		// Notes:
		// 1. Please document chunks of code as you go. Why are you doing what
		// you are doing? Comments written after the code is finalized tend to
		// be useless, since they just say WHAT the code does, line by line,
		// rather than WHY the code was written like that. Six months from now,
		// it's the reasoning behind doing what you did that will be valuable to
		// you!
		// 2. Unit tests are cumulative, and many things are based on add(), so
		// make sure that you get this one correct.
		if (this.root == NULL_NODE) {
			this.root = new EditorTreeNode(ch);
			return;
		}
		root = root.add(ch);
	}

	/**
	 * MILESTONE 1
	 * 
	 * @param ch
	 *            character to add
	 * @param pos
	 *            character added in this inorder position
	 * @throws IndexOutOfBoundsException
	 *             if pos is negative or too large for this tree
	 */
	public void add(char ch, int pos) throws IndexOutOfBoundsException {
		if(this.root == NULL_NODE && pos != 0) {
			throw new IndexOutOfBoundsException();
		}
		if (this.root == NULL_NODE) {
			this.root = new EditorTreeNode(ch);
			return;
		}
		if(pos < 0) {
			throw new IndexOutOfBoundsException();
		}
		root = root.add(ch, pos);
	}

	/**
	 * MILESTONE 1
	 * 
	 * @param pos
	 *            position in the tree
	 * @return the character at that position
	 * @throws IndexOutOfBoundsException
	 */
	public char get(int pos) throws IndexOutOfBoundsException {
		return this.root.get(pos);
	}

	/**
	 * MILESTONE 1
	 * 
	 * @return the height of this tree
	 */
	public int height() {
		int height = root.height();
		return height - 1; // replace by a real calculation.
	}

	/**
	 * MILESTONE 2
	 * 
	 * @return the number of nodes in this tree, not counting the NULL_NODE if you
	 *         have one.
	 */
	public int size() {
		return -1; // replace by a real calculation.
	}

	/**
	 * MILESTONE 2
	 * 
	 * @param pos
	 *            position of character to delete from this tree
	 * @return the character that is deleted
	 * @throws IndexOutOfBoundsException
	 */
	public char delete(int pos) throws IndexOutOfBoundsException {
		// Implementation requirement:
		// When deleting a node with two children, you normally replace the
		// node to be deleted with either its in-order successor or predecessor.
		// The tests assume assume that you will replace it with the
		// *successor*.
		return '#'; // replace by a real calculation.
	}

	/**
	 * MILESTONE 3, EASY This method operates in O(length*log N), where N is the
	 * size of this tree.
	 * 
	 * @param pos
	 *            location of the beginning of the string to retrieve
	 * @param length
	 *            length of the string to retrieve
	 * @return string of length that starts in position pos
	 * @throws IndexOutOfBoundsException
	 *             unless both pos and pos+length-1 are legitimate indexes within
	 *             this tree.
	 */
	public String get(int pos, int length) throws IndexOutOfBoundsException {
		return "";
	}

	/**
	 * MILESTONE 3, MEDIUM - SEE THE PAPER REFERENCED IN THE SPEC FOR ALGORITHM!
	 * Append (in time proportional to the log of the size of the larger tree) the
	 * contents of the other tree to this one. Other should be made empty after this
	 * operation.
	 * 
	 * @param other
	 * @throws IllegalArgumentException
	 *             if this == other
	 */
	public void concatenate(EditTree other) throws IllegalArgumentException {

	}

	/**
	 * MILESTONE 3: DIFFICULT This operation must be done in time proportional to
	 * the height of this tree.
	 * 
	 * @param pos
	 *            where to split this tree
	 * @return a new tree containing all of the elements of this tree whose
	 *         positions are >= position. Their nodes are removed from this tree.
	 * @throws IndexOutOfBoundsException
	 */
	public EditTree split(int pos) throws IndexOutOfBoundsException {
		return null; // replace by a real calculation.
	}

	/**
	 * MILESTONE 3: JUST READ IT FOR USE OF SPLIT/CONCATENATE This method is
	 * provided for you, and should not need to be changed. If split() and
	 * concatenate() are O(log N) operations as required, delete should also be
	 * O(log N)
	 * 
	 * @param start
	 *            position of beginning of string to delete
	 * 
	 * @param length
	 *            length of string to delete
	 * @return an EditTree containing the deleted string
	 * @throws IndexOutOfBoundsException
	 *             unless both start and start+length-1 are in range for this tree.
	 */
	public EditTree delete(int start, int length) throws IndexOutOfBoundsException {
		if (start < 0 || start + length >= this.size())
			throw new IndexOutOfBoundsException(
					(start < 0) ? "negative first argument to delete" : "delete range extends past end of string");
		EditTree t2 = this.split(start);
		EditTree t3 = t2.split(length);
		this.concatenate(t3);
		return t2;
	}

	/**
	 * MILESTONE 3 Don't worry if you can't do this one efficiently.
	 * 
	 * @param s
	 *            the string to look for
	 * @return the position in this tree of the first occurrence of s; -1 if s does
	 *         not occur
	 */
	public int find(String s) {
		return -2;
	}

	/**
	 * MILESTONE 3
	 * 
	 * @param s
	 *            the string to search for
	 * @param pos
	 *            the position in the tree to begin the search
	 * @return the position in this tree of the first occurrence of s that does not
	 *         occur before position pos; -1 if s does not occur
	 */
	public int find(String s, int pos) {
		return -2;
	}

	/**
	 * @return The root of this tree.
	 */
	public Node getRoot() {
		return this.root;
	}

	class EditorTreeNode extends Node {
		private char element;
		private EditorTreeNode left;
		private EditorTreeNode right;
		private int rank;
		private char balCode;

		// Creates NULL_NODE
		public EditorTreeNode() {
			this.element = ' ';
			this.left = null;
			this.right = null;
			this.rank = 0;
			this.balCode = '=';
		}

		public EditorTreeNode(char ch) {
			this.element = ch;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
			this.rank = 0;
			this.balCode = '=';
		}

		public EditorTreeNode(EditorTreeNode node) {
			this.element = node.element;
			this.left = new EditorTreeNode(node.left);
			this.right = new EditorTreeNode(node.right);
			int leftHeight = this.left.height();
			int rightHeight = this.right.height();
			this.rank = leftHeight;
			if (leftHeight > rightHeight) {
				this.balCode = '/';
			} else if (leftHeight < rightHeight) {
				this.balCode = '\\';
			} else {
				this.balCode = '=';
			}
		}

		public EditorTreeNode add(char ch, int pos) {
			if(pos > this.rank + 1 && this.right == NULL_NODE) {
				throw new IndexOutOfBoundsException();
			}
			if (pos <= this.rank) {
				this.rank++;
				if (this.left == NULL_NODE) {
					this.left = new EditorTreeNode(ch);
					if (this.balCode == '\\') {
						this.balCode = '=';
					} else {
						this.balCode = '/';
					}
				} else {
					this.left = this.left.add(ch, pos);
					if (this.balCode == '/' && this.left.balCode == '/') {
						return this.singleRightRot();
					} else if (this.balCode == '/' && this.left.balCode == '\\') {
						return this.DoubleRightRot();
					} else if (this.balCode == '\\') {
						this.balCode = '=';
					} else{
						this.balCode = '/';
					}

				}

			} else if (pos > this.rank) {
				if (this.right == NULL_NODE) {
					this.right = new EditorTreeNode(ch);
					if (this.balCode == '/') {
						this.balCode = '=';
					} else {
						this.balCode = '\\';
					}
				} else {
					this.right = this.right.add(ch, pos - (this.rank + 1));
					if (this.balCode == '\\' && this.right.balCode == '\\') {
						return this.singleLeftRot();
					} else if (this.balCode == '\\' && this.right.balCode == '/') {
						return this.DoubleLeftRot();
					} else if (this.balCode == '/') {
						this.balCode = '=';
					} else{
						this.balCode = '\\';
					}
				}
			}
			return this;
		}

		public EditorTreeNode add(char ch) {
			if (this.right == NULL_NODE) {
				this.right = new EditorTreeNode(ch);
				if (this.balCode == '/') {
					this.balCode = '=';
				} else {
					this.balCode = '\\';
				}
			} else {
				this.right = this.right.add(ch);
				if (this.balCode == '\\' && this.right.balCode == '\\') {
					return this.singleLeftRot();
				} else if (this.balCode == '/') {
					this.balCode = '=';
				} else{
					this.balCode = '\\';
				}
			}
			return this;
		}

		private EditorTreeNode DoubleRightRot() {
			this.left = this.left.singleLeftRot();
			return this.singleRightRot();
		}

		private EditorTreeNode DoubleLeftRot() {
			this.right = this.right.singleRightRot();
			return this.singleLeftRot();
		}

		private EditorTreeNode singleLeftRot() {
			EditorTreeNode orphaned = this.right.left;
			EditorTreeNode newtop = this.right;
			this.right.left = this;
			this.right.balCode = '=';
			this.right.rank += this.rank + 1;
			this.right = orphaned;
			if(this.rank > 0 && orphaned == NULL_NODE) {
				this.balCode = '/';
			}
			else {
				this.balCode = '=';
			}
			numRot++;
			return newtop;
		}

		private EditorTreeNode singleRightRot() {
			EditorTreeNode orphaned = this.left.right;
			EditorTreeNode newtop = this.left;
			this.left.right = this;
			this.left.balCode = '=';
			this.rank -= (this.left.rank + 1);
			this.left = orphaned;
//			if(this.right != NULL_NODE && orphaned == NULL_NODE) {
//				this.balCode = '\\';
//			}
//			else {
				this.balCode = '=';
//			}
			numRot++;
			return newtop;
		}

		public char get(int pos) {
			if (pos < this.rank) {
				return this.left.get(pos);
			}

			if (pos > this.rank) {
				return this.right.get(pos - (this.rank + 1));
			}

			return this.element;
		}

		public String toString() {
			if (this == NULL_NODE) {
				return "";
			}
			return this.left.toString() + this.element + this.right.toString();
		}

		public String toDebugString() {
			if (this == NULL_NODE) {
				return "";
			}
			return "" + this.element + this.rank + this.balCode + ", " + this.left.toDebugString()
					+ this.right.toDebugString();
		}

		public int height() {
			if (this == NULL_NODE) {
				return 0;
			}
			int leftHeight = this.left.height();
			int rightHeight = this.right.height();
			if (leftHeight >= rightHeight) {
				return leftHeight + 1;
			}
			return rightHeight + 1;
		}

	}
}
