package editortrees;

// A height-balanced binary tree with rank that could be the basis for a text editor.

public class EditTree {

	private EditorTreeNode root;
	private int numRot;
	private final EditorTreeNode NULL_NODE = new EditorTreeNode();;

	/**
	 * MILESTONE 1 Construct an empty tree
	 */
	public EditTree() {
		this.root = NULL_NODE;
		this.numRot = 0;
	}

	/**
	 * MILESTONE 1 Construct a single-node tree whose element is ch
	 * 
	 * @param ch
	 */
	public EditTree(char ch) {
		this.root = new EditorTreeNode(ch);
		this.numRot = 0;
	}

	/**
	 * MILESTONE 2 Make this tree be a copy of e, with all new nodes, but the same
	 * shape and contents.
	 * 
	 * @param e
	 */
	public EditTree(EditTree e) {
		if (e.root == e.NULL_NODE) {
			this.root = NULL_NODE;
		} else {
			this.root = new EditorTreeNode(e.root.element);
			this.root.copyTree(e.root, e.NULL_NODE);
		}
		// this.root = new EditorTreeNode(e.root.element);
		// this.root = NULL_NODE;
		// String s = e.toString();
		// for (int i = 0; i < s.length(); i++) {
		// root = this.root.add(s.charAt(i));
		// }
		this.numRot = 0;
	}

	/**
	 * MILESTONE 3 Create an EditTree whose toString is s. This can be done in O(N)
	 * time, where N is the size of the tree (note that repeatedly calling insert()
	 * would be O(N log N), so you need to find a more efficient way to do this.
	 * 
	 * @param s
	 */
	public EditTree(String s) {
		this.root = NULL_NODE;
		for (int i = 0; i < s.length(); i++) {
			this.root.add(s.charAt(i));
		}
		this.numRot = 0;
	}

	/**
	 * MILESTONE 1 returns the total number of rotations done in this tree since it
	 * was created. A double rotation counts as two.
	 *
	 * @return number of rotations since this tree was created.
	 */
	public int totalRotationCount() {
		return this.numRot; // replace by a real calculation.
	}

	/**
	 * MILESTONE 1 return the string produced by an inorder traversal of this tree
	 */
	@Override
	public String toString() {
		String returnString = root.toString();
		return returnString;

	}

	/**
	 * MILESTONE 1 This one asks for more info from each node. You can write it like
	 * the arraylist-based toString() method from the BinarySearchTree assignment.
	 * However, the output isn't just the elements, but the elements, ranks, and
	 * balance codes. Former CSSE230 students recommended that this method, while
	 * making it harder to pass tests initially, saves them time later since it
	 * catches weird errors that occur when you don't update ranks and balance codes
	 * correctly. For the tree with root b and children a and c, it should return
	 * the string: [b1=, a0=, c0=] There are many more examples in the unit tests.
	 * 
	 * @return The string of elements, ranks, and balance codes, given in a
	 *         pre-order traversal of the tree.
	 */
	public String toDebugString() {
		if (this.root == NULL_NODE) {
			return "[]";
		}
		String returnString = "[";
		returnString += root.toDebugString();
		returnString = returnString.substring(0, returnString.length() - 2);
		returnString += "]";
		return returnString;
	}

	/**
	 * MILESTONE 1
	 * 
	 * @param ch
	 *            character to add to the end of this tree.
	 */
	public void add(char ch) {
		// Notes:
		// 1. Please document chunks of code as you go. Why are you doing what
		// you are doing? Comments written after the code is finalized tend to
		// be useless, since they just say WHAT the code does, line by line,
		// rather than WHY the code was written like that. Six months from now,
		// it's the reasoning behind doing what you did that will be valuable to
		// you!
		// 2. Unit tests are cumulative, and many things are based on add(), so
		// make sure that you get this one correct.
		if (this.root == NULL_NODE) {
			this.root = new EditorTreeNode(ch);
			return;
		}
		// System.out.println(root.toDebugString());
		root = root.add(ch);
	}

	/**
	 * MILESTONE 1
	 * 
	 * @param ch
	 *            character to add
	 * @param pos
	 *            character added in this inorder position
	 * @throws IndexOutOfBoundsException
	 *             if pos is negative or too large for this tree
	 */
	public void add(char ch, int pos) throws IndexOutOfBoundsException {
		if (this.root == NULL_NODE && pos != 0) {
			throw new IndexOutOfBoundsException();
		}
		if (this.root == NULL_NODE) {
			this.root = new EditorTreeNode(ch);
			return;
		}
		if (pos < 0) {
			throw new IndexOutOfBoundsException();
		}
		root = root.add(ch, pos);
	}

	/**
	 * MILESTONE 1
	 * 
	 * @param pos
	 *            position in the tree
	 * @return the character at that position
	 * @throws IndexOutOfBoundsException
	 */
	public char get(int pos) throws IndexOutOfBoundsException {
		return this.root.get(pos);
	}

	/**
	 * MILESTONE 1
	 * 
	 * @return the height of this tree
	 */
	public int height() {
		int height = root.height();
		return height - 1; // replace by a real calculation.
	}

	/**
	 * MILESTONE 2
	 * 
	 * @return the number of nodes in this tree, not counting the NULL_NODE if you
	 *         have one.
	 */
	public int size() {
		return root.getSize();
	}

	/**
	 * MILESTONE 2
	 * 
	 * @param pos
	 *            position of character to delete from this tree
	 * @return the character that is deleted
	 * @throws IndexOutOfBoundsException
	 */
	public char delete(int pos) throws IndexOutOfBoundsException {
		// Implementation requirement:
		// When deleting a node with two children, you normally replace the
		// node to be deleted with either its in-order successor or predecessor.
		// The tests assume assume that you will replace it with the
		// *successor*.
		if (pos < 0 || root == NULL_NODE) {
			throw new IndexOutOfBoundsException();
		}
		Container c = new Container();

		root.delete(pos, c);
		root = c.returned;
		return c.deleted.element; // replace by a real calculation.
	}

	/**
	 * MILESTONE 3, EASY This method operates in O(length*log N), where N is the
	 * size of this tree.
	 * 
	 * @param pos
	 *            location of the beginning of the string to retrieve
	 * @param length
	 *            length of the string to retrieve
	 * @return string of length that starts in position pos
	 * @throws IndexOutOfBoundsException
	 *             unless both pos and pos+length-1 are legitimate indexes within
	 *             this tree.
	 */
	public String get(int pos, int length) throws IndexOutOfBoundsException {
		return "";
	}

	/**
	 * MILESTONE 3, MEDIUM - SEE THE PAPER REFERENCED IN THE SPEC FOR ALGORITHM!
	 * Append (in time proportional to the log of the size of the larger tree) the
	 * contents of the other tree to this one. Other should be made empty after this
	 * operation.
	 * 
	 * @param other
	 * @throws IllegalArgumentException
	 *             if this == other
	 */
	public void concatenate(EditTree other) throws IllegalArgumentException {

	}

	/**
	 * MILESTONE 3: DIFFICULT This operation must be done in time proportional to
	 * the height of this tree.
	 * 
	 * @param pos
	 *            where to split this tree
	 * @return a new tree containing all of the elements of this tree whose
	 *         positions are >= position. Their nodes are removed from this tree.
	 * @throws IndexOutOfBoundsException
	 */
	public EditTree split(int pos) throws IndexOutOfBoundsException {
		return null; // replace by a real calculation.
	}

	/**
	 * MILESTONE 3: JUST READ IT FOR USE OF SPLIT/CONCATENATE This method is
	 * provided for you, and should not need to be changed. If split() and
	 * concatenate() are O(log N) operations as required, delete should also be
	 * O(log N)
	 * 
	 * @param start
	 *            position of beginning of string to delete
	 * 
	 * @param length
	 *            length of string to delete
	 * @return an EditTree containing the deleted string
	 * @throws IndexOutOfBoundsException
	 *             unless both start and start+length-1 are in range for this tree.
	 */
	public EditTree delete(int start, int length) throws IndexOutOfBoundsException {
		if (start < 0 || start + length >= this.size())
			throw new IndexOutOfBoundsException(
					(start < 0) ? "negative first argument to delete" : "delete range extends past end of string");
		EditTree t2 = this.split(start);
		EditTree t3 = t2.split(length);
		this.concatenate(t3);
		return t2;
	}

	/**
	 * MILESTONE 3 Don't worry if you can't do this one efficiently.
	 * 
	 * @param s
	 *            the string to look for
	 * @return the position in this tree of the first occurrence of s; -1 if s does
	 *         not occur
	 */
	public int find(String s) {
		return -2;
	}

	/**
	 * MILESTONE 3
	 * 
	 * @param s
	 *            the string to search for
	 * @param pos
	 *            the position in the tree to begin the search
	 * @return the position in this tree of the first occurrence of s that does not
	 *         occur before position pos; -1 if s does not occur
	 */
	public int find(String s, int pos) {
		return -2;
	}

	/**
	 * @return The root of this tree.
	 */
	public Node getRoot() {
		return this.root;
	}

	class EditorTreeNode extends Node {
		// left and right are stored as EditorTreeNodes, not Node
		private EditorTreeNode left;
		private EditorTreeNode right;
		// the left and right node's height
		private int leftHeight;
		private int rightHeight;
		// balCode stores the way the tree balances ('/', '=', or '\\')
		private char balCode;

		/*
		 * Constructor that makes a NULL_NODE
		 */
		public EditorTreeNode() {
			this.element = ' ';
			this.left = null;
			this.right = null;
			this.leftHeight = 0;
			this.rightHeight = 0;
			this.rank = 0;
			this.balCode = '=';
		}

		/*
		 * Constructor that makes a node with element ch
		 */
		public EditorTreeNode(char ch) {
			this.element = ch;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
			this.leftHeight = 0;
			this.rightHeight = 0;
			this.rank = 0;
			this.balCode = '=';
		}

		/*
		 * Constructs a node from a node
		 */
		public EditorTreeNode(EditorTreeNode node) {
			this.element = node.element;
			this.left = new EditorTreeNode(node.left);
			this.right = new EditorTreeNode(node.right);
			this.leftHeight = node.leftHeight;
			this.rightHeight = node.rightHeight;
			this.setBalanceCode();
		}

		/*
		 * Deletes a node from the tree at position pos
		 */
		public void delete(int pos, Container c) {
			if (pos > this.rank + 1 && this.right == NULL_NODE) {
				throw new IndexOutOfBoundsException();
			}
			if (pos < this.rank) {
				this.rank--;
				

				if (this.left == NULL_NODE) {
					throw new IndexOutOfBoundsException();
				}
				this.left.delete(pos, c);
				this.left = c.returned;
				if(this.left ==NULL_NODE){
					this.leftHeight = 0;
					this.rank = 0;
				}else{
				this.leftHeight = Math.max(this.left.leftHeight, this.left.rightHeight) + 1;
				}
				
				this.setBalanceCode();
				if (Math.abs(this.leftHeight - this.rightHeight) > 1) {
					if ((this.leftHeight < this.rightHeight) && (this.right.leftHeight < this.right.rightHeight)) {
						c.returned = this.singleLeftRot();
						return;
					} else if ((this.leftHeight < this.rightHeight)
							&& (this.right.leftHeight > this.right.rightHeight)) {
						c.returned = this.doubleLeftRot();
						return;
					}
				}

				c.returned = this;

				
			} else if (pos > this.rank) {
				if (this.right == NULL_NODE) {
					throw new IndexOutOfBoundsException();
				}
				this.right.delete(pos - (this.rank + 1), c);
				this.right = c.returned;
				if(this.right == NULL_NODE){
					this.rightHeight = 0;
				}else{
				this.rightHeight = Math.max(this.right.leftHeight, this.right.rightHeight) + 1;
				}
				this.setBalanceCode();
				if (Math.abs(this.leftHeight - this.rightHeight) > 1) {
					if ((this.leftHeight > this.rightHeight) && (this.left.leftHeight > this.left.rightHeight)) {
						c.returned = this.singleRightRot();
						return;
					} else if ((this.leftHeight > this.rightHeight) && (this.left.leftHeight < this.left.rightHeight)) {
						c.returned = this.doubleRightRot();
						return;
					} else {
						this.setBalanceCode();
					}
				}
				c.returned = this;
			} else {
				c.deleted = this;
				if (this.right == NULL_NODE && this.left == NULL_NODE) {
					c.returned = NULL_NODE;
				} else if (this.right != NULL_NODE) {
					if (this.right.left == NULL_NODE) {
						this.right.left = this.left;
						this.right.rank = this.rank;
						this.right.leftHeight = this.leftHeight;
						this.right.setBalanceCode();
						c.returned = this.right;
					} else {
						EditorTreeNode temp = this.right.findNode();
						// EditorTreeNode tempRight = temp.right;
						temp.left = this.left;
						temp.right = this.right;
						// temp.right.getNext().left = tempRight;
						temp.rightHeight = Math.max(this.right.leftHeight, this.right.rightHeight) + 1;
						temp.rank = this.rank;
						temp.setBalanceCode();
						c.returned = temp;
					}
				} else if (this.left != NULL_NODE) {
					c.returned = this.left;
				}
			}
			this.setBalanceCode();
			
		}
		
		public EditorTreeNode findNode(){
			if(this.rank==0){
				return this;
			}
			return this.left.findNode();
			
		}

		private EditorTreeNode getNext() {
			EditorTreeNode node = this;
			EditorTreeNode prevnode = node;
			while (node.left != NULL_NODE) {
				prevnode = node;
				node = node.left;
			}
			prevnode.left = node.right;
			prevnode.leftHeight = Math.max(this.left.leftHeight, this.left.rightHeight) + 1;
			prevnode.setBalanceCode();
			return node;
		}

		/*
		 * Copies EditorTree e, passing in e's NULL_NODE and its root n.
		 */
		public void copyTree(EditorTreeNode n, EditorTreeNode nNull) {
			if (n != nNull) {
				if (n.left != nNull) {
					this.left = new EditorTreeNode(n.left.element);
					this.left.copyTree(n.left, nNull);
					this.leftHeight = Math.max(this.left.leftHeight, this.left.rightHeight) + 1;
				}

				if (n.right != nNull) {
					this.right = new EditorTreeNode(n.right.element);
					this.right.copyTree(n.right, nNull);
					this.rightHeight = Math.max(this.right.leftHeight, this.right.rightHeight) + 1;
				}
				this.setBalanceCode();
			}
		}

		/*
		 * Returns the size of the tree recursively and efficiently
		 */
		public int getSize() {
			if (this == NULL_NODE) {
				return 0;
			}
			return this.rank + this.right.getSize() + 1;
		}

		/*
		 * Adds a char (ch) to a specific position (pos)
		 */
		public EditorTreeNode add(char ch, int pos) {
			if (pos > this.rank + 1 && this.right == NULL_NODE) {
				throw new IndexOutOfBoundsException();
			}
			if (pos <= this.rank) {
				this.rank++;

				if (this.left == NULL_NODE) {
					this.left = new EditorTreeNode(ch);
					this.leftHeight = 1;
					this.setBalanceCode();
				} else {
					this.left = this.left.add(ch, pos);
					this.leftHeight = Math.max(this.left.leftHeight, this.left.rightHeight) + 1;
					if (Math.abs(this.leftHeight - this.rightHeight) > 1) {
						if ((this.leftHeight > this.rightHeight) && (this.left.leftHeight > this.left.rightHeight)) {
							return this.singleRightRot();
						} else if ((this.leftHeight > this.rightHeight)
								&& (this.left.leftHeight < this.left.rightHeight)) {
							return this.doubleRightRot();
						} else {
							this.setBalanceCode();
						}
					}
				}

			} else if (pos > this.rank) {
				if (this.right == NULL_NODE) {
					this.right = new EditorTreeNode(ch);
					this.rightHeight = 1;
				} else {
					this.right = this.right.add(ch, pos - (this.rank + 1));
					this.rightHeight = Math.max(this.right.leftHeight, this.right.rightHeight) + 1;
					if (Math.abs(this.leftHeight - this.rightHeight) > 1) {
						if ((this.leftHeight < this.rightHeight) && (this.right.leftHeight < this.right.rightHeight)) {
							return this.singleLeftRot();
						} else if ((this.leftHeight < this.rightHeight)
								&& (this.right.leftHeight > this.right.rightHeight)) {
							return this.doubleLeftRot();
						}
					}
				}
			}
			this.setBalanceCode();
			return this;
		}

		/*
		 * Adds a char to the rightmost position on the tree
		 */
		public EditorTreeNode add(char ch) {
			if (this.right == NULL_NODE) {
				this.rightHeight = 1;
				this.right = new EditorTreeNode(ch);
				this.setBalanceCode();
			} else {
				this.right = this.right.add(ch);
				this.rightHeight = Math.max(this.right.leftHeight, this.right.rightHeight) + 1;
				if (Math.abs(this.leftHeight - this.rightHeight) > 1) {
					if ((this.leftHeight < this.rightHeight) && (this.right.leftHeight < this.right.rightHeight)) {
						return this.singleLeftRot();
					} else if ((this.leftHeight < this.rightHeight)
							&& (this.right.leftHeight > this.right.rightHeight)) {
						return this.doubleLeftRot();
					}
				}
			}
			this.setBalanceCode();
			return this;
		}

		/*
		 * Performs a double-right rotation by performing two single rotations
		 */
		private EditorTreeNode doubleRightRot() {
			this.left = this.left.singleLeftRot();
			return this.singleRightRot();
		}

		/*
		 * Performs a double-left rotation by performing two single rotations
		 */
		private EditorTreeNode doubleLeftRot() {
			this.right = this.right.singleRightRot();
			return this.singleLeftRot();
		}

		/*
		 * Performs a single-left rotation and increases the number of rotations
		 */
		private EditorTreeNode singleLeftRot() {
			EditorTreeNode orphaned = this.right.left;
			EditorTreeNode newtop = this.right;
			this.right.left = this;
			this.right.rank += this.rank + 1;
			this.rightHeight = this.rightHeight - (this.right.rightHeight + 1) + this.right.leftHeight;
			this.right.leftHeight = ((Math.max(this.right.leftHeight, this.leftHeight)) + 1);
			this.right.setBalanceCode();
			this.right = orphaned;
			this.setBalanceCode();
			numRot++;
			return newtop;
		}

		/*
		 * Performs a single-right rotation and increases the number of rotations
		 */
		private EditorTreeNode singleRightRot() {
			EditorTreeNode orphaned = this.left.right;
			EditorTreeNode newtop = this.left;
			this.left.right = this;
			this.rank -= (this.left.rank + 1);
			this.leftHeight = this.leftHeight - (this.left.leftHeight + 1) + this.left.rightHeight;
			this.left.rightHeight = (Math.max(this.left.rightHeight, this.rightHeight)) + 1;
			this.left.setBalanceCode();
			this.left = orphaned;
			this.setBalanceCode();
			numRot++;
			return newtop;
		}

		/*
		 * Resets the balance code of a node by comparing the left and right nodes'
		 * heights
		 */
		private void setBalanceCode() {
			if (this.leftHeight == this.rightHeight) {
				this.balCode = '=';
			} else if (this.leftHeight > this.rightHeight) {
				this.balCode = '/';
			} else if (this.rightHeight > this.leftHeight) {
				this.balCode = '\\';
			}
		}

		/*
		 * Finds the node at position pos and returns the value at that position
		 */
		public char get(int pos) {
			if (this == NULL_NODE) {
				throw new IndexOutOfBoundsException();
			} else if (pos < this.rank) {
				return this.left.get(pos);
			} else if (pos > this.rank) {
				return this.right.get(pos - (this.rank + 1));
			}
			return this.element;
		}

		/*
		 * Prints each node's element out in an in-order traversal
		 */
		public String toString() {
			if (this == NULL_NODE) {
				return "";
			}
			return this.left.toString() + this.element + this.right.toString();
		}

		/*
		 * Prints each node's element, rank, and balance code in a pre-order traversal
		 */
		public String toDebugString() {
			if (this == NULL_NODE) {
				return "";
			}
			return "" + this.element + this.rank + this.balCode + ", " + this.left.toDebugString()
					+ this.right.toDebugString();
		}

		/*
		 * Gets the height of a node by comparing its left and right nodes' heights
		 */
		public int height() {
			if (this == NULL_NODE) {
				return 0;
			}
			return (Math.max(this.leftHeight, this.rightHeight) + 1);
		}
	}

	/**
	 * Container class was made to hold a deleted node and a returned node that
	 * helps return the character of the deleted node
	 *
	 * @author penryoa
	 *
	 */
	class Container {
		private EditorTreeNode deleted;
		private EditorTreeNode returned;

		public Container() {
			this.deleted = NULL_NODE;
			this.returned = NULL_NODE;
		}
	}
}
