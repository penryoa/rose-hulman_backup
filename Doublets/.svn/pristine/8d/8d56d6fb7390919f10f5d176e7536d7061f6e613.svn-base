import java.util.Comparator;
import java.util.PriorityQueue;

public class PriorityQueueChainManager extends ChainManager {
	private int size;
	private String endWord;
	private PriorityQueue<Chain> queue;
	private Entry entry;

	public PriorityQueueChainManager(String s) {
		this.endWord = s;
		this.entry = new Entry(this.endWord);
		this.queue = new PriorityQueue<Chain>(this.entry);
	}

	@Override
	public void add(Chain chain) {
		this.queue.offer(chain);
		this.size++;
		this.updateMax(this.size);

	}

	@Override
	public Chain next() {
		this.size--;
		this.incrementNumNexts();
		return this.queue.poll();
	}

	@Override
	public boolean isEmpty() {
		return (this.queue.isEmpty());
	}

	public int distanceEstimator(String word) {
		int count = 0;
		for (int i = 0; i < word.length(); i++) {
			if (word.charAt(i) != this.endWord.charAt(i)) {
				count++;
			}
		}
		return count;
	}

	public class Entry implements Comparator {
		private int value;
		private Chain chain;
		private int distEstimate;
		private int length;
		private String endWordEntry;

//		public Entry(Chain chain, String endWord) {
//			this.value = 0;
//			this.chain = chain;
//			this.distEstimate = 0;
//			this.length = 0;
//			this.endWord = endWord;
//		}
		
		public Entry(String endWord){
			this.value = 0;
			this.distEstimate = 0;
			this.length = 0;
			this.endWordEntry = endWord;
		}

		public int distanceEstimator(String word) {
			int count = 0;
			for (int i = 0; i < word.length(); i++) {
				if (word.charAt(i) == this.endWordEntry.charAt(i)) {
					count++;
				}
			}
			return count;
		}

		public int getValue(){
			for (String string : this.chain) {
				this.distEstimate += distanceEstimator(string);
				this.length ++;
			}
			this.value = this.distEstimate + this.length;
			
			return this.value;
		}
//		public void chainSwap(Chain chain1, Chain chain2){
//			distanceEstimator(chain1.getLast());
//		}

		@Override
		public int compare(Object arg0, Object arg1) {
			int distEstimate0 = 0;
			int length0 = 0;
			int value0 = 0;
			for (String string : (Chain) arg0) {
				distEstimate0 += distanceEstimator(string);
				length0 ++;
			}
			value0 = distEstimate0 + length0;
			
			int distEstimate1 = 0;
			int length1 = 0;
			int value1 = 0;
			for (String string : (Chain) arg1) {
				distEstimate1 += distanceEstimator(string);
				length1 ++;
			}
			value1 = distEstimate1 + length1;
			
			return value0-value1;
			
			
			
			
//			Entry entry0 = new Entry((String)((Chain)arg0).getLast());
//			Entry entry1 = new Entry((String)((Chain)arg1).getLast());
//			return entry0.getValue() - entry1.getValue();
			
		}
	}
}
