package graphs;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

public class AdjacencyMatrixGraph<T> extends Graph<T> {
	Map<T,Integer> keyToIndex;
	List<T> indexToKey;
	int[][] matrix;
	
	AdjacencyMatrixGraph(Set<T> keys) {
		int size = keys.size();
		this.keyToIndex = new HashMap<T,Integer>();
		this.indexToKey = new ArrayList<T>();
		this.matrix = new int[size][size];
		// need to populate keyToIndex and indexToKey with info from keys
		int i = 0;
		for (T key : keys) {
			indexToKey.add(key);
			keyToIndex.put(key, i);
			i++;
		}
	}
	
	@Override
	public int size() {
		return indexToKey.size(); // nope; wrong.
	}

	@Override
	public int numEdges() {
		int count = 0;
		for (int m = 0; m < keyToIndex.size(); m++) {
			for (int n = 0; n < keyToIndex.size(); n++) {
				if (matrix[m][n] == 1) {
					count++;
				}
			}
		}
		return count;
	}

	@Override
	public boolean addEdge(T from, T to) {
		if (keyToIndex.containsKey(from) && keyToIndex.containsKey(to)) {
			int indexFrom = keyToIndex.get(from);
			int indexTo = keyToIndex.get(to);
			if (matrix[indexFrom][indexTo] == 1) {
				return false;
			} else {
				matrix[indexFrom][indexTo] = 1;
				return true;
			}
		}
		throw new NoSuchElementException();
	}

	@Override
	public boolean hasVertex(T key) {
		return keyToIndex.containsKey(key);
	}

	@Override
	public boolean hasEdge(T from, T to) throws NoSuchElementException {
		if (keyToIndex.containsKey(from) && keyToIndex.containsKey(to)) {
			int indexFrom = keyToIndex.get(from);
			int indexTo = keyToIndex.get(to);
			if (matrix[indexFrom][indexTo] == 1) {
				return true;
			} else {
				return false;
			}
		}
		throw new NoSuchElementException();
	}

	@Override
	public boolean removeEdge(T from, T to) throws NoSuchElementException {
		if (keyToIndex.containsKey(from) && keyToIndex.containsKey(to)) {
			int indexFrom = keyToIndex.get(from);
			int indexTo = keyToIndex.get(to);
			if (matrix[indexFrom][indexTo] == 0) {
				return false;
			} else {
				matrix[indexFrom][indexTo] = 0;
				return true;
			}
		}
		throw new NoSuchElementException();
	}

	@Override
	public int outDegree(T key) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int inDegree(T key) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public Set<T> keySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<T> successorSet(T key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<T> predecessorSet(T key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterator<T> successorIterator(T key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterator<T> predecessorIterator(T key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<T> stronglyConnectedComponent(T key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<T> shortestPath(T startLabel, T endLabel) {
		// TODO Auto-generated method stub
		return null;
	}

}
