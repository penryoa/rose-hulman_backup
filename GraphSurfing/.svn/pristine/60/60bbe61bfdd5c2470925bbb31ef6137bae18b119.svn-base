package graphs;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

public class AdjacencyListGraph<T> extends Graph<T> {
	Map<T, Vertex> keyToVertex;

	private class Vertex {
		T key;
		List<Vertex> successors;
		List<Vertex> predecessors;

		Vertex(T key) {
			this.key = key;
			this.successors = new ArrayList<Vertex>();
			this.predecessors = new ArrayList<Vertex>();
		}
	}

	AdjacencyListGraph(Set<T> keys) {
		this.keyToVertex = new HashMap<T, Vertex>();
		for (T key : keys) {
			Vertex v = new Vertex(key);
			this.keyToVertex.put(key, v);
		}
	}

	@Override
	public int size() {
		return keyToVertex.keySet().size();
	}

	@Override
	public int numEdges() {
		int count = 0;
		System.out.println(keyToVertex.keySet());
		for (T key : keyToVertex.keySet()) {
			for (Vertex vtx : keyToVertex.get(key).successors) {
				System.out.println("From: " + key + " to: " + vtx.key);
				count++;
			}
		}
		return count;
	}

	@Override
	public boolean addEdge(T from, T to) {
		if (keyToVertex.containsKey(from) && keyToVertex.containsKey(to)) {
			Vertex fromVertex = keyToVertex.get(from);
			Vertex toVertex = keyToVertex.get(to);

			if (fromVertex.successors.contains(toVertex) && toVertex.predecessors.contains(fromVertex)) {
				return false;
			}

			fromVertex.successors.add(toVertex);
			toVertex.predecessors.add(fromVertex);

			return true;
		}
		throw new NoSuchElementException();
	}

	@Override
	public boolean hasVertex(T key) {
		return keyToVertex.containsKey(key);
	}

	@Override
	public boolean hasEdge(T from, T to) throws NoSuchElementException {
		if (keyToVertex.containsKey(from) && keyToVertex.containsKey(to)) {
			Vertex fromVertex = keyToVertex.get(from);
			Vertex toVertex = keyToVertex.get(to);

			if (fromVertex.successors.contains(toVertex) && toVertex.predecessors.contains(fromVertex)) {
				return true;
			}

			return false;
		}
		throw new NoSuchElementException();
	}

	@Override
	public boolean removeEdge(T from, T to) throws NoSuchElementException {
		if (keyToVertex.containsKey(from) && keyToVertex.containsKey(to)) {
			Vertex fromVertex = keyToVertex.get(from);
			Vertex toVertex = keyToVertex.get(to);

			if (!fromVertex.successors.contains(toVertex) && !toVertex.predecessors.contains(fromVertex)) {
				return false;
			}

			fromVertex.successors.remove(toVertex);
			toVertex.predecessors.remove(fromVertex);

			return true;
		}
		throw new NoSuchElementException();
	}

	@Override
	public int outDegree(T key) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int inDegree(T key) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public Set<T> keySet() {
		return keyToVertex.keySet();
	}

	@Override
	public Set<T> successorSet(T key) {
		if (keyToVertex.containsKey(key)) {
			Set<T> temp = new HashSet<T>();
			for (Vertex vtx : keyToVertex.get(key).successors) {
				temp.add(vtx.key);
			}
			return temp;
		}
		throw new NoSuchElementException();
	}

	@Override
	public Set<T> predecessorSet(T key) {
		if (keyToVertex.containsKey(key)) {
			Set<T> temp = new HashSet<T>();
			for (Vertex vtx : keyToVertex.get(key).predecessors) {
				temp.add(vtx.key);
			}
			return temp;
		}
		throw new NoSuchElementException();
	}

	@Override
	public Iterator<T> successorIterator(T key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterator<T> predecessorIterator(T key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<T> stronglyConnectedComponent(T key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<T> shortestPath(T startLabel, T endLabel) {
		// TODO Auto-generated method stub
		return null;
	}

}
